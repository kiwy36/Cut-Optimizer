/**
 * ARCHIVO PRINCIPAL DE LA APLICACI√ìN
 * Cut Optimizer - Aplicaci√≥n de optimizaci√≥n de cortes
 * Coordina todos los m√≥dulos y maneja la inicializaci√≥n
 */

// Variables globales de la aplicaci√≥n
const App = {
    // Configuraci√≥n inicial
    config: {
        defaultSheetWidth: 2440,
        defaultSheetHeight: 1220,
        maxSheetsToDisplay: 10
    },
    
    // Estado de la aplicaci√≥n
    state: {
        pieces: [],
        sheets: [],
        isOptimizing: false
    },
    
    /**
     * Inicializa la aplicaci√≥n
     */
    init: function() {
        console.log('üöÄ Inicializando Cut Optimizer...');
        
        // Inicializar m√≥dulos
        PieceManager.init();
        Renderer.init();
        
        // Configurar event listeners
        this.setupEventListeners();
        
        // Agregar primera pieza por defecto
        PieceManager.addPiece();
        
        console.log('‚úÖ Aplicaci√≥n inicializada correctamente');
    },
    
    /**
     * Configura todos los event listeners de la aplicaci√≥n
     */
    setupEventListeners: function() {
        // Bot√≥n para agregar piezas
        document.getElementById('addPiece').addEventListener('click', () => {
            PieceManager.addPiece();
        });
        
        // Bot√≥n de optimizaci√≥n
        document.getElementById('optimizeBtn').addEventListener('click', () => {
            this.handleOptimize();
        });
        
        // Enter en inputs num√©ricos tambi√©n dispara optimizaci√≥n
        document.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && e.target.type === 'number') {
                this.handleOptimize();
            }
        });
    },
    
    /**
     * Maneja el proceso de optimizaci√≥n
     */
    handleOptimize: function() {
        console.log('üîÑ Iniciando proceso de optimizaci√≥n...');
        
        // Prevenir m√∫ltiples optimizaciones simult√°neas
        if (this.state.isOptimizing) {
            console.warn('‚ö†Ô∏è Optimizaci√≥n ya en progreso');
            return;
        }
        
        this.state.isOptimizing = true;
        
        try {
            // Obtener configuraci√≥n de la placa
            const sheetWidth = parseInt(document.getElementById('sheetWidth').value);
            const sheetHeight = parseInt(document.getElementById('sheetHeight').value);
            
            // Validar entradas
            if (!this.validateInputs(sheetWidth, sheetHeight)) {
                return;
            }
            
            // Obtener piezas del manager
            const pieces = PieceManager.getAllPieces();
            
            if (pieces.length === 0) {
                Renderer.showError('‚ùå Agrega al menos una pieza para optimizar');
                return;
            }
            
            // Ejecutar algoritmo de optimizaci√≥n
            this.state.sheets = Optimizer.shelfAlgorithm(pieces, sheetWidth, sheetHeight);
            
            // Renderizar resultados
            Renderer.displayResults(this.state.sheets, sheetWidth, sheetHeight);
            
            console.log(`‚úÖ Optimizaci√≥n completada: ${this.state.sheets.length} placas utilizadas`);
            
        } catch (error) {
            console.error('‚ùå Error durante la optimizaci√≥n:', error);
            Renderer.showError('Error durante la optimizaci√≥n: ' + error.message);
        } finally {
            this.state.isOptimizing = false;
        }
    },
    
    /**
     * Valida las entradas del usuario
     * @param {number} sheetWidth - Ancho de la placa
     * @param {number} sheetHeight - Alto de la placa
     * @returns {boolean} True si las entradas son v√°lidas
     */
    validateInputs: function(sheetWidth, sheetHeight) {
        // Validar tama√±o de placa
        if (isNaN(sheetWidth) || sheetWidth <= 0) {
            Renderer.showError('‚ùå El ancho de la placa debe ser un n√∫mero positivo');
            return false;
        }
        
        if (isNaN(sheetHeight) || sheetHeight <= 0) {
            Renderer.showError('‚ùå El alto de la placa debe ser un n√∫mero positivo');
            return false;
        }
        
        // Validar piezas individuales
        const pieces = PieceManager.getAllPieces();
        for (const piece of pieces) {
            if (piece.width > sheetWidth || piece.height > sheetHeight) {
                Renderer.showError(`‚ùå La pieza ${piece.width}x${piece.height}mm es m√°s grande que la placa`);
                return false;
            }
        }
        
        return true;
    },
    
    /**
     * Obtiene el estado actual de la aplicaci√≥n
     * @returns {Object} Estado de la aplicaci√≥n
     */
    getState: function() {
        return { ...this.state };
    },
    
    /**
     * Reinicia la aplicaci√≥n al estado inicial
     */
    reset: function() {
        this.state.pieces = [];
        this.state.sheets = [];
        this.state.isOptimizing = false;
        
        PieceManager.reset();
        Renderer.clearResults();
        
        console.log('üîÑ Aplicaci√≥n reiniciada');
    }
};

// Inicializar la aplicaci√≥n cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', function() {
    App.init();
});

// Hacer App disponible globalmente para debugging
window.App = App;